# Making assert more useful for infrastructure testing

This project contains two [Ansible][] plugins:

- A replacement for the core library `assert` action plugin.
- The `assertive` stdout callback plugin

[ansible]: http://www.ansible.com/

## Supported Ansible versions

These plugins are tested with Ansible versions 2.2.3.0 and 2.3.1.0 and
with the current `devel` branch.

## About the assert module

The `assert` module operates very much like the one in the core
library, with two key differences:

- By default, a failed `assert` will be marked as `changed` rather
  than `failed`.  You can enable the stock behavior by specifying
  `fatal: true`.

- The plugin will always evaluate all the tests in your `that` array
  (that is, it will continue to evaluate tests even after one has
  failed).  The individual tests and their results are returned in the
  `assertions` key.

- The plugin takes advantage of Ansible's custom statistics
  functionality to count the number of failed/passed/total assertions.

### Example 1

Here is a simple playbook that contains two assertions:

@verbatim yaml examples/ex-001.1/playbook.yml

If we run this using the stock behavior, we will see the following:

@ex 001.1

That is, playbook execution will abort after the first assertion
failure.  If we activate the replacement `assert` plugin with the
following `ansible.cfg`:

@verbatim examples/ex-001.2/ansible.cfg

Then we will see that an assertion failure shows up as `changed`
rather than `failed`, allowing playbook execution to continue:

@ex 001.2

### Example 2

The return value from the `assert` action includes information about
the assertions as well as metadata that can be consumed by the [custom
statistics][] support in recent versions of Ansible.  We could see the
return value by instrumenting an `assert` task with a `register`
directive and following it with a `debug` task, or we can enable the
`fail_verbose` option by setting the `ASSERTIVE_FAIL_VERBOSE`
environment variable.

@verbatim examples/ex-002/environ

Running the playbook from our earlier examples yields:

@ex 002

[custom statistics]: http://docs.ansible.com/ansible/latest/intro_configuration.html#show-custom-stats

## About the assertive callback plugin

The `assertive` callback plugin operates very much like the default
stdout callback plugin, but contains special support for the `assert`
module:

- It modifies the output of `assert` tasks to be more readable to
  provide more detail, and

- It gathers per-host, per-play, and per-playbook-run assertion
  statistics, and

- It can write assertion results to a YAML file.

### Example 3

If we have a task similar to that in the first example:

@verbatim yaml examples/ex-003/playbook.yml

And we activate the `assertive` callback plugin using the following
`ansible.cfg`:

@verbatim examples/ex-003/ansible.cfg

We see the following output:

@ex 003

As you can see, the `assertion` tasks now show details about both
passed and failed assertions.  There are custom statistics available
that show details about passed, failed, and total assertions.

We can record the results to a file by setting the `ASSERTIVE_RECORD`
environment variable, as in:

@verbatim examples/ex-003/environ

The YAML file written out by the `assertive` plugin looks like
this:

@verbatim yaml examples/ex-003/testresult.yml

## Build status

<!-- lint:disable -->
[![Build Status](https://travis-ci.org/larsks/ansible-assertive.svg?branch=master)](https://travis-ci.org/larsks/ansible-assertive)
<!-- lint:enable -->
